{"version":3,"sources":["actions/index.ts","reducers/disposition.ts","store.ts","reducers/index.ts","types/enums.ts","lib/position.ts","lib/ship.ts","constants/index.ts","lib/cell.ts","components/common/Cell.tsx","components/common/Ship.tsx","components/common/DragAndDropCursor.tsx","lib/cursor.ts","components/common/Battlefield.tsx","components/common/Header.tsx","components/settings_page/ShipList.tsx","components/settings_page/index.tsx","actions/disposition.js","lib/nahimov.ts","components/game_page/BoardTitle.tsx","components/game_page/GameResult.tsx","components/game_page/index.tsx","App.tsx","index.js"],"names":["UPDATE_DISPOSITION_SUCCESS","RESET_DISPOSITION_SUCCESS","initialState","state","action","type","positions","rootReducer","combineReducers","disposition","middleware","thunk","store","createStore","compose","applyMiddleware","Pages","Orientation","ClassOfShip","CellStates","Players","GameStates","Position","x","y","prevPosition","this","move","Ship","id","length","life","orientation","Horizontal","Vertical","result","xOffset","yOffset","i","position","push","isOnBoard","Submarine","Destroyer","Cruiser","Battleship","ship","cells","freeCells","Array","from","values","filter","isFilled","isInactive","index","Math","floor","random","isPositionValid","rotate","shipCells","cell","get","TOTAL_SHIPS_COUNT","LABELS_OF_SHIP","Cell","currentShipId","currentState","Empty","shipId","Inactive","Open","Injured","Destroyed","value","generate","Map","BATTLEFIELD_SIZE","set","resetCells","forEach","updateCells","ships","borders","key","className","hidden","onClick","isDamaged","isOpen","cellClass","data-x","data-y","data-shipid","isSelected","orient","data-id","map","DragAndDropCursor","cursor","handleDragAndDrop","fromEvent","document","getElementsByClassName","subscribe","handleMouseDown","handleMouseMove","handleMouseUp","event","keyCode","props","currentShip","onRotateShip","e","isActive","target","parentElement","classList","contains","isShip","dataset","shipid","onMouseDown","clientX","clientY","cellX","cellY","onMouseUp","prevProps","element","style","left","top","Object","freeze","createCursor","Component","Battlefield","onCellClick","Header","as","content","color","dangerouslySetInnerHTML","__html","ShipList","categories","reduce","res","item","category","SetupPage","setState","setCurrentShip","reset","handleRotateShip","handlePlayClick","simplify","updateDisposition","prevState","isReadyToPlay","mapDispatchToProps","connect","createNahimov","enemyPositions","potentionalTargets","luckyShots","getTargetKey","shift","total","getAvailableCells","setResult","arr","xPositions","p","sort","a","b","yPositions","Set","size","lo","hi","pop","delete","setPotentionalTargets","openCells","pos","BoardTitle","isCurrent","GameResult","message","winner","One","GamePage","nahimov","playerOneShips","playerTwoShips","currentPlayer","playerOneCells","playerTwoCells","gameState","Play","handleOnClick","Two","Over","nextPlayer","strike","counterAttack","find","addDamage","isDestroyed","handleReplayClick","resetDisposition","initPlayerOne","initPlayerTwo","setPositionRandomly","setTimeout","isGameOver","App","useState","Settings","currentPage","setCurrentPage","useSelector","pages","Game","useEffect","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.191e2095.chunk.js","sourcesContent":["export const UPDATE_DISPOSITION_SUCCESS = \"update_disposition_success\";\nexport const RESET_DISPOSITION_SUCCESS = \"reset_disposition_success\";\n","import { Ship } from \"../types\";\nimport {\n  UPDATE_DISPOSITION_SUCCESS,\n  RESET_DISPOSITION_SUCCESS\n} from \"../actions\";\n\nconst initialState: Ship[] = [];\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case UPDATE_DISPOSITION_SUCCESS:\n      return action.positions;\n    case RESET_DISPOSITION_SUCCESS:\n      return initialState;\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport createRootReducer from \"./reducers\";\n\nconst rootReducer = createRootReducer();\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import { combineReducers } from \"redux\";\nimport disposition from \"./disposition\";\n\nexport default () => combineReducers({ disposition });\n","export enum Pages {\n  Settings = \"settings\",\n  Game = \"game\"\n}\n\nexport enum Orientation {\n  Horizontal = \"horizontal\",\n  Vertical = \"vertical\"\n}\n\nexport enum ClassOfShip {\n  Submarine = 1,\n  Destroyer = 2,\n  Cruiser = 3,\n  Battleship = 4\n}\n\nexport enum CellStates {\n  Empty = 0,\n  Filled = 1,\n  Injured = 2,\n  Destroyed = 3,\n  Inactive = 4,\n  Open = 5\n}\n\nexport enum Players {\n  One = 1,\n  Two = 2\n}\n\nexport enum GameStates {\n  Over = 0,\n  Play = 1\n}\n","import { IPosition } from \"../types\";\n\nclass Position implements IPosition {\n  x: number = 0;\n  y: number = 0;\n  prevPosition: { x: number; y: number } = { x: 0, y: 0 };\n\n  constructor(x: number, y: number) {\n    this.move(x, y);\n  }\n\n  get position() {\n    return { x: this.x, y: this.y };\n  }\n\n  get key() {\n    return `${this.x}:${this.y}`;\n  }\n\n  move(x: number, y: number) {\n    this.prevPosition = { x, y };\n    this.x = x;\n    this.y = y;\n  }\n\n  reset() {\n    this.x = this.prevPosition.x;\n    this.y = this.prevPosition.y;\n  }\n\n  isOnBoard() {\n    return this.x > 0 && this.y > 0;\n  }\n}\n\nexport default Position;\n","import Position from \"./position\";\nimport { ClassOfShip, Orientation } from \"../types/enums\";\nimport { IShip, ICell } from \"../types\";\n\ninterface IProps {\n  id: number;\n  length: number;\n  x: number;\n  y: number;\n}\n\nclass Ship extends Position implements IShip {\n  id = -1;\n  length = 0;\n  life = 0;\n  orientation = Orientation.Horizontal;\n\n  constructor({ id, x, y, length }: IProps) {\n    super(x, y);\n\n    this.id = id;\n    this.length = length;\n    this.life = length;\n  }\n\n  get orient() {\n    return this.orientation;\n  }\n\n  rotate() {\n    this.orientation =\n      this.orientation === Orientation.Horizontal\n        ? Orientation.Vertical\n        : Orientation.Horizontal;\n  }\n\n  addDamage() {\n    this.life -= 1;\n  }\n\n  isDestroyed() {\n    return this.life === 0;\n  }\n\n  positions() {\n    const result = [];\n\n    let xOffset = 0;\n    let yOffset = 0;\n\n    if (this.orientation === Orientation.Horizontal) {\n      xOffset = 1;\n    } else {\n      yOffset = 1;\n    }\n\n    for (let i = 0; i < this.length; ++i) {\n      const x = this.position.x + i * xOffset;\n      const y = this.position.y + i * yOffset;\n\n      result.push({ x, y });\n    }\n\n    return result;\n  }\n\n  borders() {\n    const result: any[] = [];\n\n    if (!this.isOnBoard()) return result;\n\n    if (this.orientation === Orientation.Horizontal) {\n      for (let i = 0; i < this.length; ++i) {\n        result.push(\n          new Position(this.position.x + i, this.position.y - 1),\n          new Position(this.position.x + i, this.position.y + 1)\n        );\n      }\n\n      result.push(\n        new Position(this.position.x - 1, this.position.y),\n        new Position(this.position.x - 1, this.position.y - 1),\n        new Position(this.position.x - 1, this.position.y + 1),\n        new Position(this.position.x + this.length, this.position.y),\n        new Position(this.position.x + this.length, this.position.y - 1),\n        new Position(this.position.x + this.length, this.position.y + 1)\n      );\n    } else {\n      for (let i = 0; i < this.length; ++i) {\n        result.push(\n          new Position(this.position.x - 1, this.position.y + i),\n          new Position(this.position.x + 1, this.position.y + i)\n        );\n      }\n\n      result.push(\n        new Position(this.position.x + 1, this.position.y - 1),\n        new Position(this.position.x, this.position.y - 1),\n        new Position(this.position.x - 1, this.position.y - 1),\n        new Position(this.position.x + 1, this.position.y + this.length),\n        new Position(this.position.x, this.position.y + this.length),\n        new Position(this.position.x - 1, this.position.y + this.length)\n      );\n    }\n\n    return result;\n  }\n\n  simplify() {\n    return {\n      id: this.id,\n      orientation: this.orientation,\n      x: this.position.x,\n      y: this.position.y\n    };\n  }\n\n  static generate() {\n    return [\n      new Ship({ id: 0, x: 0, y: 0, length: ClassOfShip.Submarine }),\n      new Ship({ id: 1, x: 0, y: 0, length: ClassOfShip.Submarine }),\n      new Ship({ id: 2, x: 0, y: 0, length: ClassOfShip.Submarine }),\n      new Ship({ id: 3, x: 0, y: 0, length: ClassOfShip.Submarine }),\n      new Ship({ id: 4, x: 0, y: 0, length: ClassOfShip.Destroyer }),\n      new Ship({ id: 5, x: 0, y: 0, length: ClassOfShip.Destroyer }),\n      new Ship({ id: 6, x: 0, y: 0, length: ClassOfShip.Destroyer }),\n      new Ship({ id: 7, x: 0, y: 0, length: ClassOfShip.Cruiser }),\n      new Ship({ id: 8, x: 0, y: 0, length: ClassOfShip.Cruiser }),\n      new Ship({ id: 9, x: 0, y: 0, length: ClassOfShip.Battleship })\n    ];\n  }\n\n  static setPositionRandomly(ship: IShip, cells: Map<string, ICell>) {\n    const freeCells = Array.from(cells.values()).filter(\n      (i: ICell) => !i.isFilled() && !i.isInactive()\n    );\n\n    const t = true;\n    while (t) {\n      const index = Math.floor(Math.random() * freeCells.length);\n\n      ship.move(freeCells[index].position.x, freeCells[index].position.y);\n\n      if (Ship.isPositionValid(ship, cells)) {\n        break;\n      } else {\n        ship.rotate();\n      }\n    }\n  }\n\n  static isPositionValid(ship: any, cells: any) {\n    const shipCells = ship.positions();\n\n    for (let i = 0; i < shipCells.length; ++i) {\n      const position = shipCells[i];\n      const cell = cells.get(`${position.x}:${position.y}`);\n\n      if (!cell || cell.isFilled() || cell.isInactive()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport default Ship;\n","import { ClassOfShip } from \"./../types/enums\";\n\nexport const BATTLEFIELD_SIZE = 10;\nexport const TOTAL_SHIPS_COUNT = 10;\n\nexport const LABELS_OF_SHIP: { [key: string]: string } = {\n  [ClassOfShip.Submarine]: \"submarine\",\n  [ClassOfShip.Destroyer]: \"destroyer\",\n  [ClassOfShip.Cruiser]: \"cruiser\",\n  [ClassOfShip.Battleship]: \"battleship\"\n};\n","import Position from \"./position\";\nimport { BATTLEFIELD_SIZE } from \"../constants\";\nimport { CellStates } from \"../types/enums\";\nimport { ICell, IShip } from \"../types\";\n\nclass Cell extends Position implements ICell {\n  currentShipId = -1;\n  currentState = CellStates.Empty;\n\n  get state() {\n    return this.currentState;\n  }\n\n  get shipId() {\n    return this.currentShipId;\n  }\n\n  set state(value: CellStates) {\n    this.currentState = value;\n  }\n\n  set shipId(value: number) {\n    this.currentShipId = value;\n  }\n\n  isFilled(): boolean {\n    return this.shipId !== -1;\n  }\n\n  isInactive(): boolean {\n    return this.state === CellStates.Inactive;\n  }\n\n  isOpen(): boolean {\n    return this.state === CellStates.Open;\n  }\n\n  isDamaged(): boolean {\n    return (\n      this.state === CellStates.Injured || this.state === CellStates.Destroyed\n    );\n  }\n\n  static generate = () => {\n    const result = new Map();\n\n    for (let y = 1; y < BATTLEFIELD_SIZE + 1; ++y) {\n      for (let x = 1; x < BATTLEFIELD_SIZE + 1; ++x) {\n        result.set(`${x}:${y}`, new Cell(x, y));\n      }\n    }\n\n    return result;\n  };\n\n  static resetCells = (cells: Map<string, ICell>) => {\n    cells.forEach((cell: ICell) => {\n      cell.shipId = -1;\n      cell.state = CellStates.Empty;\n    });\n  };\n\n  static updateCells = (cells: Map<string, ICell>, ships: IShip[]) => {\n    for (let i = 0; i < ships.length; ++i) {\n      for (const position of ships[i].positions()) {\n        const cell = cells.get(`${position.x}:${position.y}`);\n\n        if (cell) {\n          cell.shipId = ships[i].id;\n        }\n      }\n\n      for (const position of ships[i].borders()) {\n        const cell = cells.get(position.key);\n\n        if (cell) {\n          cell.state = CellStates.Inactive;\n        }\n      }\n    }\n  };\n}\n\nexport default Cell;\n","import React from \"react\";\n\ninterface IProps {\n  className?: string;\n  x?: number;\n  y?: number;\n  shipId: number;\n  onClick?: Function;\n  isDamaged?: boolean;\n  isInactive?: boolean;\n  hidden?: boolean;\n  isOpen?: boolean;\n}\n\nconst Cell = ({\n  className,\n  hidden,\n  x,\n  y,\n  shipId,\n  onClick,\n  isDamaged,\n  isInactive,\n  isOpen\n}: IProps) => {\n  let cellClass = \"cell\";\n\n  if (className) {\n    cellClass = `${cellClass} ${className}`;\n  }\n\n  if (shipId > -1 && !hidden) {\n    cellClass = `${cellClass} cell--ship`;\n  }\n\n  if (isDamaged) {\n    cellClass = `${cellClass} cell--damaged`;\n  }\n\n  if (!hidden && isInactive) {\n    cellClass = `${cellClass} cell--inactive`;\n  }\n\n  if (isOpen) {\n    cellClass = `${cellClass} cell--open`;\n  }\n\n  const handleOnClick = () => {\n    if (onClick) {\n      onClick(x, y);\n    }\n  };\n\n  return (\n    <div\n      className={cellClass}\n      data-x={x}\n      data-y={y}\n      data-shipid={shipId}\n      onClick={handleOnClick}\n    />\n  );\n};\n\nexport default Cell;\n","import React from \"react\";\nimport Cell from \"./Cell\";\nimport { IShip } from \"../../types\";\n\ninterface IProps {\n  ship: IShip | null;\n  isSelected?: boolean;\n}\n\nconst Ship = ({ ship, isSelected }: IProps) => {\n  if (!ship) return null;\n\n  let className = `ship ship--${ship.orient}`;\n\n  if (isSelected) {\n    className += \" ship--current\";\n  }\n\n  return (\n    <div className={className} data-id={ship.id}>\n      {ship.positions().map((i: IShip, index: number) => (\n        <Cell\n          key={`${ship.id}-${index}`}\n          shipId={ship.id}\n          isInactive={ship.isOnBoard()}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Ship;\n","import React, { Component } from \"react\";\nimport { fromEvent } from \"rxjs\";\nimport { createCursor } from \"../../lib/cursor\";\nimport Ship from \"../common/Ship\";\nimport { IShip, Cursor } from \"../../types\";\n\ninterface IProps {\n  currentShip: IShip | null;\n  onMouseDown: Function;\n  onMouseUp: Function;\n  onRotateShip: Function;\n}\n\nexport default class DragAndDropCursor extends Component<IProps> {\n  cursor: Cursor | null = null;\n\n  componentDidMount() {\n    this.handleDragAndDrop();\n  }\n\n  componentDidUpdate(prevProps: IProps) {\n    if (prevProps.currentShip && this.props.currentShip && !this.cursor) {\n      this.cursor = createCursor();\n    }\n\n    if (this.props.currentShip === null) {\n      this.cursor = null;\n    }\n  }\n\n  handleDragAndDrop = () => {\n    fromEvent(document.getElementsByClassName(\"cell\"), \"mousedown\").subscribe(\n      this.handleMouseDown\n    );\n\n    fromEvent(document, \"mousemove\").subscribe(this.handleMouseMove);\n\n    fromEvent(document.getElementsByClassName(\"field\"), \"mouseup\").subscribe(\n      this.handleMouseUp\n    );\n\n    fromEvent(document, \"keydown\").subscribe((event: any) => {\n      if (event.keyCode === 32 && this.props.currentShip) {\n        this.props.onRotateShip(this.props.currentShip);\n      }\n    });\n  };\n\n  handleMouseDown = (e: any) => {\n    const isActive = !e.target.parentElement.classList.contains(\"inactive\");\n    const isShip = +e.target.dataset.shipid !== -1;\n\n    if (!isActive || !isShip || this.props.currentShip) return;\n\n    this.props.onMouseDown(e.target.dataset.shipid);\n  };\n\n  handleMouseMove = (e: any) => {\n    if (!this.cursor) return;\n\n    this.cursor.move(e.clientX, e.clientY);\n  };\n\n  handleMouseUp = (e: any) => {\n    if (!this.props.currentShip || !this.cursor) return;\n\n    const cellX = +e.target.dataset.x;\n    const cellY = +e.target.dataset.y;\n    const id = +this.cursor.shipId();\n\n    this.props.onMouseUp(id, cellX, cellY);\n  };\n\n  render() {\n    const { currentShip } = this.props;\n\n    if (!currentShip) return null;\n\n    return <Ship ship={currentShip} isSelected={true} />;\n  }\n}\n","function createCursor() {\n  const element = document.getElementsByClassName(\n    \"ship--current\"\n  )[0] as HTMLElement;\n\n  if (element) {\n    element.style.left = `-1000px`;\n    element.style.top = `-1000px`;\n  }\n\n  function move(x: number, y: number) {\n    if (element) {\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n    }\n  }\n\n  function shipId() {\n    return element ? element.dataset.id : -1;\n  }\n\n  return Object.freeze({\n    move,\n    shipId\n  });\n}\n\nexport { createCursor };\n","import React from \"react\";\nimport Cell from \"./Cell\";\nimport { ICell } from \"../../types\";\n\ninterface IProps {\n  cells: Map<string, ICell>;\n  hidden?: boolean;\n  onCellClick?: Function;\n}\n\nconst Battlefield = ({ cells, hidden, onCellClick }: IProps) => {\n  return (\n    <div className=\"board\">\n      {Array.from(cells.values()).map((cell: ICell) => (\n        <Cell\n          key={cell.key}\n          className=\"field\"\n          hidden={hidden}\n          x={cell.position.x}\n          y={cell.position.y}\n          shipId={cell.shipId}\n          onClick={onCellClick}\n          isDamaged={cell.isDamaged()}\n          isInactive={cell.isInactive()}\n          isOpen={cell.isOpen()}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Battlefield;\n","import React from \"react\";\n\ninterface IProps {\n  as: string;\n  content: string;\n  color?: string;\n}\n\nconst Header = ({ as, content, color = \"white\" }: IProps) => {\n  return (\n    <div\n      style={{ color: color }}\n      dangerouslySetInnerHTML={{\n        __html: `<${as}>${content}</${as}>`\n      }}\n    />\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Ship from \"../common/Ship\";\nimport { IShip } from \"../../types\";\nimport { LABELS_OF_SHIP } from \"../../constants\";\n\ninterface IProps {\n  ships: IShip[];\n}\n\nconst ShipList = ({ ships }: IProps) => {\n  const categories = ships.reduce((res: any, item: IShip) => {\n    if (!res[item.length]) {\n      res[item.length] = {\n        type: LABELS_OF_SHIP[item.length],\n        ships: []\n      };\n    }\n\n    res[item.length].ships.push(item);\n\n    return res;\n  }, {});\n\n  return (\n    <div className=\"ship-list\">\n      {Object.values(categories).map((category: any) => (\n        <div key={`ship-row-${category.type}`} className=\"ship-list__row\">\n          <div className=\"ship-list__row__label\">{category.type}</div>\n          {category.ships.map((ship: IShip) => (\n            <Ship key={`ship-${ship.id}`} ship={ship} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShipList;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateDisposition } from \"../../actions/disposition\";\nimport Ship from \"../../lib/ship\";\nimport Cell from \"../../lib/cell\";\nimport DragAndDropCursor from \"../common/DragAndDropCursor\";\nimport Battlefield from \"../common/Battlefield\";\nimport Header from \"../common/Header\";\nimport ShipList from \"./ShipList\";\nimport { IShip, ICell } from \"../../types\";\n\ninterface IProps {\n  updateDisposition: Function;\n}\n\ninterface IState {\n  cells: Map<string, ICell>;\n  ships: IShip[];\n  currentShip: IShip | null;\n}\n\nclass SetupPage extends Component<IProps, IState> {\n  state = {\n    currentShip: null,\n    ships: Ship.generate(),\n    cells: Cell.generate()\n  };\n\n  componentDidMount() {\n    this.updateCells();\n  }\n\n  componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (prevState.currentShip !== null && this.state.currentShip === null) {\n      this.updateCells();\n    } else if (prevState.currentShip !== this.state.currentShip) {\n      this.updateCells();\n    }\n  }\n\n  get isReadyToPlay(): boolean {\n    return this.state.ships.filter((i: IShip) => i.isOnBoard()).length === 10;\n  }\n\n  updateCells() {\n    const { cells, ships } = this.state;\n\n    Cell.resetCells(cells);\n    Cell.updateCells(cells, ships);\n\n    this.setState({ cells });\n  }\n\n  handleMouseDown = (shipId: string) => {\n    const setCurrentShip = () => {\n      const { ships } = this.state;\n\n      for (let i = 0; i < ships.length; ++i) {\n        if (ships[i].id === +shipId) {\n          ships[i].move(0, 0);\n          this.setState({ ships, currentShip: ships[i] });\n\n          break;\n        }\n      }\n    };\n\n    setCurrentShip();\n  };\n\n  handleMouseUp = (shipId: number, cellX: number, cellY: number) => {\n    const { ships, cells } = this.state;\n\n    for (let i = 0; i < ships.length; ++i) {\n      if (ships[i].id === shipId) {\n        ships[i].move(cellX, cellY);\n\n        if (Ship.isPositionValid(ships[i], cells)) {\n          this.setState({ ships, currentShip: null });\n        } else {\n          ships[i].reset();\n        }\n\n        break;\n      }\n    }\n  };\n\n  handleRotateShip = (ship: IShip) => {\n    ship.rotate();\n    this.setState({ currentShip: ship });\n  };\n\n  handlePlayClick = () => {\n    const ships = this.state.ships.map((item: IShip) => item.simplify());\n    this.props.updateDisposition(ships);\n  };\n\n  render() {\n    const { ships, cells, currentShip } = this.state;\n\n    return (\n      <div className=\"page v-container\">\n        <Header as=\"h3\" content=\"Hi, admiral! Set up your flotilla!\" />\n\n        <div className=\"h-container\">\n          <div className=\"h-container__col\">\n            <Battlefield cells={cells} />\n          </div>\n\n          <div className=\"h-container__col\">\n            <ShipList ships={ships} />\n\n            <ul className=\"brief\">\n              <li>\n                <b>move</b> - drag and drop\n              </li>\n              <li>\n                <b>rotate</b> - select and press space\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div>\n          {this.isReadyToPlay && (\n            <button onClick={this.handlePlayClick}>Battle!</button>\n          )}\n        </div>\n\n        <DragAndDropCursor\n          currentShip={currentShip}\n          onMouseDown={this.handleMouseDown}\n          onMouseUp={this.handleMouseUp}\n          onRotateShip={this.handleRotateShip}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  updateDisposition\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SetupPage);\n","import { UPDATE_DISPOSITION_SUCCESS, RESET_DISPOSITION_SUCCESS } from \"./\";\n\nfunction updateDisposition(positions) {\n  return { type: UPDATE_DISPOSITION_SUCCESS, positions };\n}\n\nfunction resetDisposition() {\n  return { type: RESET_DISPOSITION_SUCCESS };\n}\n\nexport { updateDisposition, resetDisposition };\n","import Cell from \"./cell\";\nimport Position from \"./position\";\nimport { ICell } from \"../types\";\nimport { CellStates } from \"../types/enums\";\n\nfunction createNahimov() {\n  const enemyPositions: Map<string, ICell> = Cell.generate();\n  let potentionalTargets: Position[] = [];\n  let luckyShots: Position[] = [];\n\n  function getTargetKey() {\n    if (potentionalTargets.length > 0) {\n      return potentionalTargets.shift()!.key;\n    }\n\n    const cells = getAvailableCells(enemyPositions);\n    const randomIndex = getRandomTarget(cells.length);\n\n    return cells[randomIndex].key;\n  }\n\n  function setResult(position: { x: number; y: number }, result: CellStates) {\n    enemyPositions.get(`${position.x}:${position.y}`)!.state = result;\n\n    if (result === CellStates.Injured) {\n      luckyShots.push(new Position(position.x, position.y));\n      setPotentionalTargets(position);\n    } else if (result === CellStates.Destroyed) {\n      potentionalTargets = [];\n      luckyShots = [];\n    }\n  }\n\n  function setPotentionalTargets(position: { x: number; y: number }) {\n    const arr = new Map();\n\n    if (luckyShots.length > 1) {\n      potentionalTargets = [];\n\n      const xPositions = luckyShots.map(p => p.x).sort((a, b) => +a - +b);\n      const yPositions = luckyShots.map(p => p.y).sort((a, b) => +a - +b);\n\n      const uniqX = new Set(xPositions);\n\n      if (uniqX.size === 1) {\n        const lo = yPositions.shift() || position.y;\n        const hi = yPositions.pop() || position.y;\n\n        arr.set(0, new Position(position.x, lo - 1));\n        arr.set(1, new Position(position.x, hi + 1));\n      } else {\n        const lo = xPositions.shift() || position.x;\n        const hi = xPositions.pop() || position.x;\n\n        arr.set(0, new Position(lo - 1, position.y));\n        arr.set(1, new Position(hi + 1, position.y));\n      }\n    } else {\n      arr.set(0, new Position(position.x + 1, position.y));\n      arr.set(1, new Position(position.x - 1, position.y));\n      arr.set(2, new Position(position.x, position.y + 1));\n      arr.set(3, new Position(position.x, position.y - 1));\n    }\n\n    arr.forEach((value: Position, key: number) => {\n      if (\n        !enemyPositions.get(value.key) ||\n        enemyPositions.get(value.key)!.isOpen() ||\n        enemyPositions.get(value.key)!.isDamaged()\n      ) {\n        arr.delete(key);\n      }\n    });\n\n    potentionalTargets = [...potentionalTargets, ...Array.from(arr.values())];\n  }\n\n  function openCells(positions: Position[]) {\n    for (const i of positions) {\n      const pos = enemyPositions.get(i.key);\n      if (pos) {\n        pos.state = CellStates.Open;\n      }\n    }\n  }\n\n  return Object.freeze({\n    getTargetKey,\n    setResult,\n    openCells\n  });\n}\n\nfunction getAvailableCells(cells: Map<string, ICell>) {\n  return Array.from(cells.values()).filter(i => !i.isOpen() && !i.isDamaged());\n}\n\nfunction getRandomTarget(total: number) {\n  return Math.floor(Math.random() * total);\n}\n\nexport { createNahimov };\n","import React from \"react\";\n\ninterface IProps {\n  isCurrent: boolean;\n  content: String;\n}\n\nconst BoardTitle = ({ isCurrent, content }: IProps) => {\n  let className: string = \"board-title\";\n  if (isCurrent) {\n    className += \" board-title--current\";\n  }\n\n  return <div className={className}>{content}</div>;\n};\n\nexport default BoardTitle;\n","import React from \"react\";\nimport { Players } from \"../../types/enums\";\nimport Header from \"../common/Header\";\n\ninterface IProps {\n  onClick: any;\n  winner: Players;\n}\n\nconst GameResult = ({ onClick, winner }: IProps) => {\n  const message =\n    winner === Players.One\n      ? \"Salute! You win!\"\n      : \"Sorry admiral! Your flotilla was destroyed\";\n\n  return (\n    <div className=\"game-result\">\n      <Header as=\"h3\" color=\"blue\" content={message} />\n      <button onClick={onClick}>Replay</button>\n    </div>\n  );\n};\n\nexport default GameResult;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { resetDisposition } from \"../../actions/disposition\";\nimport Cell from \"../../lib/cell\";\nimport Ship from \"../../lib/ship\";\nimport { createNahimov } from \"../../lib/nahimov\";\nimport Battlefield from \"../common/Battlefield\";\nimport Header from \"../common/Header\";\nimport BoardTitle from \"./BoardTitle\";\nimport GameResult from \"./GameResult\";\nimport { TOTAL_SHIPS_COUNT } from \"../../constants\";\nimport { IShip, ICell } from \"../../types\";\nimport {\n  CellStates,\n  Players,\n  Orientation,\n  GameStates\n} from \"../../types/enums\";\n\ninterface IProps {\n  disposition: any[];\n  resetDisposition: Function;\n}\n\ninterface IState {\n  gameState: GameStates;\n  currentPlayer: Players;\n  playerOneCells: Map<string, ICell>;\n  playerTwoCells: Map<string, ICell>;\n}\n\nclass GamePage extends Component<IProps, IState> {\n  nahimov = createNahimov();\n\n  playerOneShips = Ship.generate();\n  playerTwoShips = Ship.generate();\n\n  state = {\n    currentPlayer: Players.One,\n    playerOneCells: Cell.generate(),\n    playerTwoCells: Cell.generate(),\n    gameState: GameStates.Play,\n    winner: null\n  };\n\n  componentDidMount() {\n    this.initPlayerOne();\n    this.initPlayerTwo();\n  }\n\n  get isGameOver(): boolean {\n    return this.state.gameState === GameStates.Over;\n  }\n\n  initPlayerOne() {\n    const { disposition } = this.props;\n    const { playerOneCells } = this.state;\n\n    for (let i = 0; i < disposition.length; ++i) {\n      const ship = this.playerOneShips.find(\n        (item: IShip) => item.id === disposition[i].id\n      );\n\n      if (ship) {\n        ship.move(disposition[i].x, disposition[i].y);\n\n        if (disposition[i].orientation === Orientation.Vertical) {\n          ship.rotate();\n        }\n      }\n    }\n\n    Cell.updateCells(playerOneCells, this.playerOneShips);\n    this.setState({ playerOneCells });\n  }\n\n  initPlayerTwo() {\n    const { playerTwoCells } = this.state;\n\n    for (let i = 0; i < this.playerTwoShips.length; ++i) {\n      Ship.setPositionRandomly(this.playerTwoShips[i], playerTwoCells);\n      Cell.updateCells(playerTwoCells, this.playerTwoShips);\n    }\n    this.setState({ playerTwoCells });\n  }\n\n  handleOnClick = (x: number, y: number) => {\n    const { playerTwoCells, currentPlayer, gameState } = this.state;\n\n    if (currentPlayer === Players.Two || gameState === GameStates.Over) {\n      return;\n    }\n\n    let nextPlayer = Players.Two;\n    const cell = playerTwoCells.get(`${x}:${y}`);\n\n    if (cell.isDamaged() || cell.isOpen()) {\n      return;\n    }\n\n    this.strike(cell, this.playerTwoShips, playerTwoCells);\n\n    if (cell.isDamaged()) {\n      nextPlayer = Players.One;\n    } else {\n      this.counterAttack();\n    }\n\n    this.setState({ playerTwoCells, currentPlayer: nextPlayer });\n  };\n\n  counterAttack() {\n    setTimeout(() => {\n      const { playerOneCells, gameState } = this.state;\n\n      if (gameState === GameStates.Over) {\n        return;\n      }\n\n      let currentPlayer = Players.One;\n\n      const key = this.nahimov.getTargetKey();\n      const cell = playerOneCells.get(key);\n\n      const result = this.strike(cell, this.playerOneShips, playerOneCells);\n      this.nahimov.setResult(cell.position, result);\n\n      if (cell.isDamaged()) {\n        currentPlayer = Players.Two;\n        this.counterAttack();\n      }\n\n      this.setState({ playerOneCells, currentPlayer });\n    }, 1000);\n  }\n\n  strike = (cell: ICell, ships: IShip[], cells: Map<string, ICell>) => {\n    let result = CellStates.Open;\n\n    if (cell.isFilled()) {\n      const ship = ships.find(i => i.id === cell.shipId);\n      ship!.addDamage();\n      cell.state = CellStates.Injured;\n\n      if (ship!.isDestroyed()) {\n        result = CellStates.Destroyed;\n\n        if (this.state.currentPlayer === Players.Two) {\n          this.nahimov.openCells(ship!.borders());\n        }\n\n        for (const position of ship!.borders()) {\n          const cell = cells.get(position.key);\n          if (cell) {\n            cell.state = CellStates.Open;\n          }\n        }\n\n        const damagedShips = ships.filter((ship: IShip) => {\n          return ship.isDestroyed();\n        });\n\n        if (damagedShips.length === TOTAL_SHIPS_COUNT) {\n          this.setState({ gameState: GameStates.Over });\n        }\n      } else {\n        result = CellStates.Injured;\n      }\n    } else if (!cell.isOpen() || cell.isInactive()) {\n      cell.state = CellStates.Open;\n    }\n\n    return result;\n  };\n\n  handleReplayClick = () => {\n    this.props.resetDisposition();\n  };\n\n  render() {\n    const { playerOneCells, playerTwoCells, currentPlayer } = this.state;\n\n    return (\n      <div className=\"page v-container\">\n        <Header as=\"h3\" content=\"Whist all up!\" />\n\n        <div className=\"h-container\">\n          <div className=\"h-container__col\">\n            <BoardTitle\n              isCurrent={currentPlayer === Players.Two}\n              content=\"Player1\"\n            />\n\n            <Battlefield cells={playerOneCells} />\n          </div>\n\n          <div className=\"h-container__col\">\n            <BoardTitle\n              isCurrent={currentPlayer === Players.One}\n              content=\"Player2\"\n            />\n\n            <Battlefield\n              hidden={true}\n              cells={playerTwoCells}\n              onCellClick={this.handleOnClick}\n            />\n          </div>\n        </div>\n\n        {this.isGameOver && (\n          <GameResult onClick={this.handleReplayClick} winner={currentPlayer} />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    disposition: state.disposition\n  };\n};\n\nconst mapDispatchToProps = {\n  resetDisposition\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GamePage);\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport SetupPage from \"./components/settings_page\";\nimport GamePage from \"./components/game_page\";\nimport Header from \"./components/common/Header\";\nimport { Ship } from \"./types\";\nimport { Pages } from \"./types/enums\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState(Pages.Settings);\n  const disposition: Ship[] = useSelector((state: any) => state.disposition);\n\n  const pages: { [key: string]: React.ReactElement } = {\n    [Pages.Settings]: <SetupPage />,\n    [Pages.Game]: <GamePage />\n  };\n\n  useEffect(() => {\n    if (disposition.length > 1) {\n      setCurrentPage(Pages.Game);\n    } else {\n      setCurrentPage(Pages.Settings);\n    }\n  }, [disposition]);\n\n  return (\n    <Fragment>\n      <Header as=\"h1\" content=\"Battleships\" />\n      {pages[currentPage]}\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}